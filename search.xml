<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[git 命令汇总]]></title>
    <url>%2F2019%2F09%2F04%2Fgit%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[参考教程:廖雪峰git教程 git简介 1 Git是什么？ Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. 关于版本控制:版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统 2 Git简史 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上，2002年，整个项目组开始 启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码。 2005年，bitKeeper与Linux解约，Linux开发了自己的版本系统Git（速度、简单、非线性、 分布、大数据） 3版本管理历史 3.1 本地版本控制（Local Version Control Systems） 复制文件（记错、混淆、覆盖文件） 数据库记录历次更新的差异 在硬盘上保存补丁集 3.2集中化的版本控制系统（Centralized Version Control Systems，简称 CVCS SVN） 不同操作系统同步代码 集中管理版本的服务器，通过客户端请求服务器获取最新的代码，或提交 新的代码 好处：项目成员之间可以大致了解彼此都做了什么工作，管理CVCS更容易 一些 3.3 分布式版本控制系统（DVCS Git） Git、Mercurial、Bazaar 以及 Darcs 等，客户端并不只提 取最新版本的文件快照，而是把代码仓库完整地镜像下来。 系统都可指定和若干不同远端代码仓库进行交互。你可以 在同一个项目中，分别和不同工作小组的人相互协作。 基本命令123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566# 安装Git$ sudo apt install git# 配置个人信息$ git config --global user.name "Your Name"$ git config --global user.email "email@example.com"# 获取帮助$ git help &lt;verb&gt;$ git &lt;verb&gt; --help$ man git-&lt;verb&gt;# 比如，要学习 config 命令可以怎么用，运行：$ git help config# 创建文件$touch &lt;file&gt;# 创建一个空目录$ mkdir#切换到该目录$ cd # 显示当前目录$pwd# 显示隐藏目录$ls -ah# 切换目录初始化$ git init# 文件添加到仓库$ git add -p &lt;file&gt;# 把文件提交到仓库$ git commit -m "message"# 查看仓库当前状态$ git status# 查看difference$ git diff# 显示从最近到最远的提交日志$ git log --pretty=oneline # 格式化输出信息# 版本退回$ git reset --hard HEAD^ # 当前版本HEAD,上一个版本HEAD^,上上个版本HEAD^^$ git reset --hard 130f10a # 或HEAD~100# 查看命令记录$ git reflog# 丢弃工作区的修改，回到最近一次git commit或git add时的状态：$ git checkout -- README.md# 把暂存区的修改撤销掉（unstage）$ git reset HEAD READER.md# 从版本库中删除该文件$ git rm README.md$ git commit -m "remove READER.md"# 把误删的文件恢复到最新版本，checkout其实用版本库里的版本替换工作区的版本$ git checkout -- README.md 远程仓库123456789101112131415$ ssh-keygen -t rsa -C "youremail@example.com"# 测试是否成功$ ssh -T git@github.com# 把一个已有的本地仓库与之关联$ git remote add origin git@github.com:Windrivder/Windrivder.git# 把本地库的所有内容推送到远程库上（推送master分支的内容）$ git push -u origin master# 向远程库推送更新$ git push origin master# 从远程库克隆$ git clone git@github.com:michaelliao/gitskills.git 分支管理123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899# 创建+切换dev分支$ git checkout -b dev# 相当于$ git branch dev # 创建分支$ git checkout dev# 查看当前分支，当前分支前面标有×号$ git branch# 切换回master分支$ git checkout master# 合并指定分支到当前分支$ git merge dev# 删除dev分支$ git branch -d dev# 查看分支合并情况$ git log --graph --pretty=oneline --abbrev-commit* 59bc1cb conflict fixed|\| * 75a857c AND simple* | 400b400 &amp; simple|/* fec145a branch test# 删除feature1分支$ git branch -d feature1# 创建并切换dev分支$ git checkout -b dev# 修改readme.txt文件，并提交一个新的commit$ git add readme.txt$ git commit -m &quot;add merge&quot;# 切换回master$ git checkout master# 合并dev分支，请注意--no-ff参数，表示禁用Fast forward$ git merge --no-ff -m &quot;merge with no-ff&quot; dev# 看看分支历史$ git log --graph --pretty=oneline --abbrev-commit* 7825a50 merge with no-ff|\| * 6224937 add merge|/* 59bc1cb conflict fixed# 如果需要临时修复Bug，可以把当前工作现场“储藏”起来，等Bug修复后恢复现场后继续工作$ git stash# 此时查看工作区是干净# 切换到需要修复Bug的分支，创建临时分支来修复$ git checkout master$ git checkout -b issue-101# 修复完成后切换到master分支，完成合并，删除临时分支$ git checkout master$ git merge --no-ff -m &quot;merged bug fix 101&quot; issue-101$ git branch -d issue-101# Bug修复后，切换回dev分支继续干活$ git checkout dev# 查看工作现场列表$ git stash list# 恢复工作现场$ git stash pop # 恢复的同时把stash内容也删了$ git stash apply # 恢复，不删除stash的内容，使用git stash drop# 再次查看工作现场列表，干净$ git stash list# 可以多次stash，恢复时指定恢复$ git stash apply stash@&#123;0&#125;# 强行删除一个没有合并过的分支$ git branch -D &lt;name&gt;# 要查看远程库的信息$ git remote$ git remote -v# 推送其他分支$ git push origin dev# 从远程库clone，默认情况只能看到master分支，需要在dev分支，必须创建远程origin的dev分支到本地$ git checkout -b dev origin/dev$ git checkout -b branch-name origin/branch-name$ git branch --set-upstream branch-name origin/branch-name # 关联# 向远程库推送dev有冲突$ git pull # 抓取到本地合并解决冲突，再向远程推送$ git push origin dev 标签管理1234567891011121314151617181920212223242526272829303132# 切换到需要打标签的分支$ git branch$ git checkout master# 创建标签$ git tag v1.0# 查看所有标签$ git tag# 给历史提高的commit id打标签$ git log --pretty=oneline --abbrev-commit # 查看commit id$ git tag v0.9 6224937# 查看标签信息$ git show v0.9# 创建带有说明的标签$ git tag -a v0.1 -m &quot;version 0.1 released&quot; 3628164# 用PGP签名标签$ git tag -s &lt;tagname&gt; -m &quot;blablabla...&quot;# 推送某个标签到远程$ git push origin v1.0# 一次性推送全部尚未推送到远程的本地标签$ git push origin --tags# 删除远程标签$ git tag -d v0.9 # 删除本地$ git push origin :refs/tags/v0.9 # 删除远程]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
