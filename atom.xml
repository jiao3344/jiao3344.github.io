<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yao bai</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-04T02:50:09.796Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yao bai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git 命令汇总</title>
    <link href="http://yoursite.com/2019/09/04/git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/09/04/git基本使用总结/</id>
    <published>2019-09-04T02:31:05.630Z</published>
    <updated>2019-09-04T02:50:09.796Z</updated>
    
    <content type="html"><![CDATA[<p>参考教程:<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰git教程</a></p><h1 id="git简介"><a href="#git简介" class="headerlink" title="git简介"></a>git简介</h1><blockquote><p>1 Git是什么？</p><ul><li>Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.</li><li>关于版本控制:版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统</li></ul></blockquote><blockquote><p>2 Git简史</p><ul><li>Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上，2002年，整个项目组开始 启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码。</li><li>2005年，bitKeeper与Linux解约，Linux开发了自己的版本系统Git（速度、简单、非线性、 分布、大数据）</li></ul></blockquote><blockquote><p>3版本管理历史</p><blockquote><p>3.1 本地版本控制（Local Version Control Systems）</p><ul><li>复制文件（记错、混淆、覆盖文件）</li><li>数据库记录历次更新的差异</li><li>在硬盘上保存补丁集</li></ul></blockquote></blockquote><blockquote><blockquote><p>3.2集中化的版本控制系统（Centralized Version Control Systems，简称 CVCS SVN）</p><ul><li>不同操作系统同步代码</li><li>集中管理版本的服务器，通过客户端请求服务器获取最新的代码，或提交 新的代码</li><li>好处：项目成员之间可以大致了解彼此都做了什么工作，管理CVCS更容易 一些</li></ul></blockquote></blockquote><blockquote><blockquote><p>3.3 分布式版本控制系统（DVCS Git）</p><ul><li>Git、Mercurial、Bazaar 以及 Darcs 等，客户端并不只提 取最新版本的文件快照，而是把代码仓库完整地镜像下来。</li><li>系统都可指定和若干不同远端代码仓库进行交互。你可以 在同一个项目中，分别和不同工作小组的人相互协作。</li></ul></blockquote></blockquote><h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"># 安装Git</span><br><span class="line">$ sudo apt install git</span><br><span class="line"></span><br><span class="line"># 配置个人信息</span><br><span class="line">$ git config --global user.name <span class="string">"Your Name"</span></span><br><span class="line">$ git config --global user.email <span class="string">"email@example.com"</span></span><br><span class="line"></span><br><span class="line"># 获取帮助</span><br><span class="line">$ git help &lt;verb&gt;</span><br><span class="line">$ git &lt;verb&gt; --help</span><br><span class="line">$ man git-&lt;verb&gt;</span><br><span class="line"># 比如，要学习 config 命令可以怎么用，运行：</span><br><span class="line">$ git help config</span><br><span class="line"></span><br><span class="line"># 创建文件</span><br><span class="line">$touch &lt;file&gt;</span><br><span class="line"></span><br><span class="line"># 创建一个空目录</span><br><span class="line">$ mkdir</span><br><span class="line"></span><br><span class="line">#切换到该目录</span><br><span class="line">$ cd </span><br><span class="line"></span><br><span class="line"># 显示当前目录</span><br><span class="line">$pwd</span><br><span class="line"></span><br><span class="line"># 显示隐藏目录</span><br><span class="line">$ls -ah</span><br><span class="line"></span><br><span class="line"># 切换目录初始化</span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"># 文件添加到仓库</span><br><span class="line">$ git add -p &lt;file&gt;</span><br><span class="line"></span><br><span class="line"># 把文件提交到仓库</span><br><span class="line">$ git commit -m "message"</span><br><span class="line"></span><br><span class="line"># 查看仓库当前状态</span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"># 查看difference</span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"># 显示从最近到最远的提交日志</span><br><span class="line">$ git log --pretty=oneline # 格式化输出信息</span><br><span class="line"></span><br><span class="line"># 版本退回</span><br><span class="line">$ git reset --hard HEAD^ # 当前版本HEAD,上一个版本HEAD^,上上个版本HEAD^^</span><br><span class="line">$ git reset --hard 130f10a # 或HEAD~100</span><br><span class="line"></span><br><span class="line"># 查看命令记录</span><br><span class="line">$ git reflog</span><br><span class="line"></span><br><span class="line"># 丢弃工作区的修改，回到最近一次git commit或git add时的状态：</span><br><span class="line">$ git checkout -- README.md</span><br><span class="line"></span><br><span class="line"># 把暂存区的修改撤销掉（unstage）</span><br><span class="line">$ git reset HEAD READER.md</span><br><span class="line"></span><br><span class="line"># 从版本库中删除该文件</span><br><span class="line">$ git rm README.md</span><br><span class="line">$ git commit -m "remove READER.md"</span><br><span class="line"></span><br><span class="line"># 把误删的文件恢复到最新版本，checkout其实用版本库里的版本替换工作区的版本</span><br><span class="line">$ git checkout -- README.md</span><br></pre></td></tr></table></figure><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></span><br><span class="line"># 测试是否成功</span><br><span class="line">$ ssh -T git@github.com</span><br><span class="line"></span><br><span class="line"># 把一个已有的本地仓库与之关联</span><br><span class="line">$ git remote add origin git@github.com:Windrivder/Windrivder.git</span><br><span class="line"></span><br><span class="line"># 把本地库的所有内容推送到远程库上（推送master分支的内容）</span><br><span class="line">$ git push -u origin master</span><br><span class="line"></span><br><span class="line"># 向远程库推送更新</span><br><span class="line">$ git push origin master</span><br><span class="line"></span><br><span class="line"># 从远程库克隆</span><br><span class="line">$ git clone git@github.com:michaelliao/gitskills.git</span><br></pre></td></tr></table></figure><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"># 创建+切换dev分支</span><br><span class="line">$ git checkout -b dev</span><br><span class="line"></span><br><span class="line"># 相当于</span><br><span class="line">$ git branch dev # 创建分支</span><br><span class="line">$ git checkout dev</span><br><span class="line"></span><br><span class="line"># 查看当前分支，当前分支前面标有×号</span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"># 切换回master分支</span><br><span class="line">$ git checkout master</span><br><span class="line"></span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge dev</span><br><span class="line"></span><br><span class="line"># 删除dev分支</span><br><span class="line">$ git branch -d dev</span><br><span class="line"></span><br><span class="line"># 查看分支合并情况</span><br><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">*   59bc1cb conflict fixed</span><br><span class="line">|\</span><br><span class="line">| * 75a857c AND simple</span><br><span class="line">* | 400b400 &amp; simple</span><br><span class="line">|/</span><br><span class="line">* fec145a branch test</span><br><span class="line"></span><br><span class="line"># 删除feature1分支</span><br><span class="line">$ git branch -d feature1</span><br><span class="line"></span><br><span class="line"># 创建并切换dev分支</span><br><span class="line">$ git checkout -b dev</span><br><span class="line"></span><br><span class="line"># 修改readme.txt文件，并提交一个新的commit</span><br><span class="line">$ git add readme.txt</span><br><span class="line">$ git commit -m &quot;add merge&quot;</span><br><span class="line"></span><br><span class="line"># 切换回master</span><br><span class="line">$ git checkout master</span><br><span class="line"></span><br><span class="line"># 合并dev分支，请注意--no-ff参数，表示禁用Fast forward</span><br><span class="line">$ git merge --no-ff -m &quot;merge with no-ff&quot; dev</span><br><span class="line"></span><br><span class="line"># 看看分支历史</span><br><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">*   7825a50 merge with no-ff</span><br><span class="line">|\</span><br><span class="line">| * 6224937 add merge</span><br><span class="line">|/</span><br><span class="line">*   59bc1cb conflict fixed</span><br><span class="line"></span><br><span class="line"># 如果需要临时修复Bug，可以把当前工作现场“储藏”起来，等Bug修复后恢复现场后继续工作</span><br><span class="line">$ git stash</span><br><span class="line"></span><br><span class="line"># 此时查看工作区是干净</span><br><span class="line"># 切换到需要修复Bug的分支，创建临时分支来修复</span><br><span class="line">$ git checkout master</span><br><span class="line">$ git checkout -b issue-101</span><br><span class="line"></span><br><span class="line"># 修复完成后切换到master分支，完成合并，删除临时分支</span><br><span class="line">$ git checkout master</span><br><span class="line">$ git merge --no-ff -m &quot;merged bug fix 101&quot; issue-101</span><br><span class="line">$ git branch -d issue-101</span><br><span class="line"></span><br><span class="line"># Bug修复后，切换回dev分支继续干活</span><br><span class="line">$ git checkout dev</span><br><span class="line"></span><br><span class="line"># 查看工作现场列表</span><br><span class="line">$ git stash list</span><br><span class="line"></span><br><span class="line"># 恢复工作现场</span><br><span class="line">$ git stash pop # 恢复的同时把stash内容也删了</span><br><span class="line">$ git stash apply # 恢复，不删除stash的内容，使用git stash drop</span><br><span class="line"></span><br><span class="line"># 再次查看工作现场列表，干净</span><br><span class="line">$ git stash list</span><br><span class="line"></span><br><span class="line"># 可以多次stash，恢复时指定恢复</span><br><span class="line">$ git stash apply stash@&#123;0&#125;</span><br><span class="line"></span><br><span class="line"># 强行删除一个没有合并过的分支</span><br><span class="line">$ git branch -D &lt;name&gt;</span><br><span class="line"></span><br><span class="line"># 要查看远程库的信息</span><br><span class="line">$ git remote</span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"># 推送其他分支</span><br><span class="line">$ git push origin dev</span><br><span class="line"></span><br><span class="line"># 从远程库clone，默认情况只能看到master分支，需要在dev分支，必须创建远程origin的dev分支到本地</span><br><span class="line">$ git checkout -b dev origin/dev</span><br><span class="line">$ git checkout -b branch-name origin/branch-name</span><br><span class="line">$ git branch --set-upstream branch-name origin/branch-name # 关联</span><br><span class="line"></span><br><span class="line"># 向远程库推送dev有冲突</span><br><span class="line">$ git pull # 抓取到本地合并解决冲突，再向远程推送</span><br><span class="line">$ git push origin dev</span><br></pre></td></tr></table></figure><h1 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 切换到需要打标签的分支</span><br><span class="line">$ git branch</span><br><span class="line">$ git checkout master</span><br><span class="line"></span><br><span class="line"># 创建标签</span><br><span class="line">$ git tag v1.0</span><br><span class="line"></span><br><span class="line"># 查看所有标签</span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"># 给历史提高的commit id打标签</span><br><span class="line">$ git log --pretty=oneline --abbrev-commit # 查看commit id</span><br><span class="line">$ git tag v0.9 6224937</span><br><span class="line"></span><br><span class="line"># 查看标签信息</span><br><span class="line">$ git show v0.9</span><br><span class="line"></span><br><span class="line"># 创建带有说明的标签</span><br><span class="line">$ git tag -a v0.1 -m &quot;version 0.1 released&quot; 3628164</span><br><span class="line"></span><br><span class="line"># 用PGP签名标签</span><br><span class="line">$ git tag -s &lt;tagname&gt; -m &quot;blablabla...&quot;</span><br><span class="line"></span><br><span class="line"># 推送某个标签到远程</span><br><span class="line">$ git push origin v1.0</span><br><span class="line"></span><br><span class="line"># 一次性推送全部尚未推送到远程的本地标签</span><br><span class="line">$ git push origin --tags</span><br><span class="line"></span><br><span class="line"># 删除远程标签</span><br><span class="line">$ git tag -d v0.9 # 删除本地</span><br><span class="line">$ git push origin :refs/tags/v0.9 # 删除远程</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考教程:&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/896043488029600&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;廖雪峰git教程&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;git简介&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="tool" scheme="http://yoursite.com/categories/tool/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
</feed>
